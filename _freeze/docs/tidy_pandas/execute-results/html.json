{
  "hash": "ba2db24832ee51a479c0524fbc7e4a9a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"tidy Python Pandas\"\nauthor: \"William Lee\"\ndate: \"1/3/2022\"\ndate-modified: last-modified\nformat: \n  html:\n    number-sections: true\n# jupyter: python_articles # uv run python -m ipykernel install --user --name python_articles\necho: false\nexecute:\n  freeze: auto  # re-render only when source changes\n---\n\n\n\n\n# ‘tidy’ Python Pandas\n\nThis article is for R users who like the easy-to-read dplyr way of piping data manipulation and would like to apply this in python (pandas).\nThis is also for beginner python users wanting to learn to code in a robust way following ‘tidy’ principles :\n\n- Readable code designed for humans, applying the 'grammar of data manipulation'\n- Chaining commands ('verbs') together for readability from left to right, top to bottom\n- Immutable datasets for reproducibility (when I run some code on line 10, I don’t want it to affect any datasets from previous lines)\n- Using existing and widely used pandas data structure\n- inputs and outputs are datasets (rather than series types) for predictability\n\nOne option is a package dedicated to this task: siuba package. However, this still doesn’t feel natural to use for me. I prefer using the standard pandas package if using certain methods and chaining commands together.\n\nThe first thing to start with is the main 5 'verbs' that we use to manipulate data:\n\n1. select\n2. filter\n3. arrange\n4. mutate\n5. summarise\n\nThese can be achieved within pandas in a similar way to dplyr.\n\n::: {#1ddc8e63 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>TPD</td>\n      <td>F</td>\n      <td>0.8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>DI</td>\n      <td>F</td>\n      <td>0.9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Selecting columns of your data with **[[double brackets]]**\nThis can be achieved with the [[column]] operator. (the filter method in pandas \nalso works, but I prefer not to confuse with the 'natural' definition of filter\nusually meaning filter row, rather than columns)\n\n::: {#a5e873dd .cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>TPD</td>\n      <td>F</td>\n      <td>0.8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>DI</td>\n      <td>F</td>\n      <td>0.9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filtering rows with a ***query***\n\nTo filter rows, there are many ways using python (loc, and [] notations requiring retyping dataset name twice). I find the most powerful and easy way is using the query method:\n\n::: {#94d4de02 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nisn't this easier than:\n\n::: {#83d8e1d9 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## ***Sort values*** of your dataset\n\n::: {#3f37bcf4 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>DI</td>\n      <td>F</td>\n      <td>0.9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>TPD</td>\n      <td>F</td>\n      <td>0.8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## ***Assign*** extra columns based on calculations of existing columns\n\nAgain pandas allows this to be done using many methods, but easy with assign method:\n\n::: {#15ca14a6 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n      <th>risk_and_gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.2</td>\n      <td>0</td>\n      <td>Life F</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.7</td>\n      <td>0</td>\n      <td>Life F</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>TPD M</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>DI M</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>TPD</td>\n      <td>F</td>\n      <td>0.8</td>\n      <td>1</td>\n      <td>TPD F</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>DI</td>\n      <td>F</td>\n      <td>0.9</td>\n      <td>0</td>\n      <td>DI F</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Trauma M</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis is slightly trickier to understand with the requriement of the lambda function (compared to the usual approach of creating a new series), but the following code:\n\n::: {#7ba3fa8f .cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_number</th>\n      <th>risk_type</th>\n      <th>gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n      <th>risk_and_gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>0.5</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.2</td>\n      <td>0</td>\n      <td>Life F</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Life</td>\n      <td>F</td>\n      <td>0.7</td>\n      <td>0</td>\n      <td>Life F</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Life</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Life M</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>TPD</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>TPD M</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>DI</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>DI M</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>TPD</td>\n      <td>F</td>\n      <td>0.8</td>\n      <td>1</td>\n      <td>TPD F</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>DI</td>\n      <td>F</td>\n      <td>0.9</td>\n      <td>0</td>\n      <td>DI F</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Trauma</td>\n      <td>M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>Trauma M</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nrequires the in-place replacement of the `policies` dataset and so will adjust the `policies` dataset that when created did not have the risk_and_gender field, which could cause some confusion when debugging.\n\n## **Groupby** variables and **Aggregate** your dataset \n\nIn order to summarise your data (and potentially after grouping by certain variables), this can all be chained together in one statement\n\n::: {#c46d5dd4 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>exposure</th>\n      <th>claim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>exposure</th>\n      <td>8.1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>claim</th>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYes we could have done this easier using .sum() or .agg but I like to follow the principle of longer readable code preferred over shorter less human readable code\n\n::: {#f36e28e8 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nexposure    8.1\nclaim       1.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {#2b5440df .cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\npolicy_number                                                     55\nrisk_type                       LifeLifeLifeLifeLifeTPDDITPDDITrauma\ngender                                                    MMFFMMMFFM\nexposure                                                         8.1\nclaim                                                              1\nrisk_and_gender    Life MLife MLife FLife FLife MTPD MDI MTPD FDI...\ndtype: object\n```\n:::\n:::\n\n\n## Putting it togther by chaining\n\nThe advantages of applying only these 5 verbs to remember in pandas to deal with 80% of your data manipulation problems means there is less to remember in learning pandas, there is predictable inputs and outputs (dataframes, not series sometimes), and you can chain commands so it is readable, and immutable tables will be clearer and reduce errors\n\n::: {#74cbf7c8 .cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>risk_and_gender</th>\n      <th>exposure</th>\n      <th>claim</th>\n      <th>incidence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Life F</td>\n      <td>0.9</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Life M</td>\n      <td>2.5</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>TPD F</td>\n      <td>0.8</td>\n      <td>1</td>\n      <td>1.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TPD M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Trauma M</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* multiple lines of code can be also created (instead of the escape \\ operator) with overall parenthesese around multi-lines. This has the benefit of being able to input comments in between lines. The disadvantage is in practice I like highlighting subset blocks of lines (not necesessary all the lines) to run interactively at a time and this requires an extra closing brackets\n\n# Appendix \n## Comparison syntax of 'tidy' pandas vs dplyr\n\n::: {#10a6a880 .cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>exposure</th>\n      <th>claim</th>\n      <th>incidence</th>\n    </tr>\n    <tr>\n      <th>risk_and_gender</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Life F</th>\n      <td>0.9</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Life M</th>\n      <td>2.5</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>TPD F</th>\n      <td>0.8</td>\n      <td>1</td>\n      <td>1.25</td>\n    </tr>\n    <tr>\n      <th>TPD M</th>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Trauma M</th>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe problem with this method is that because we have modified the `policies` dataset in place, we cannot rerun the above block of code after rerunning once.\nThis is overcome by treating datasets as \"immutable\" so that there's no confusion about the `policies` dataset, and reproducibility when re-running code is allowed.\n\nSummary comparison vs dplyr\n\n\n\n+----------------------+-------------------------------------+----------------------------------------------+\n| Action               | R (dplyr)                           | tidy Pandas Method                           |\n+======================+=====================================+==============================================+\n| select dataframe     | df                                  | df                                           |\n+----------------------+-------------------------------------+----------------------------------------------+\n| Subset columns       | df %>%                              | df[['column1', 'column2']]                   |\n|                      |   select(column1, column2)          |                                              |\n+----------------------+-------------------------------------+----------------------------------------------+\n| Subset rows          | df %>%                              | df.query('column1 == \"A\"')                   |\n|                      |   filter(column1 == 'A')            |                                              |\n+----------------------+-------------------------------------+----------------------------------------------+\n| Create new column    | df %>%                              | df.assign(column1 = lambda d: d.column1 + 1) |\n|                      |   mutate(column2 = column1 + 1)     |                                              |\n+----------------------+-------------------------------------+----------------------------------------------+\n| Group by / aggregate | df %>%                              | df.groupby('key') \\                          |\n|                      |   group_by(key)                     |   aggregate(col1sum=('column1', 'sum'))      |\n|                      |   summarise(col1sum = sum(column1)) |                                              |\n+----------------------+-------------------------------------+----------------------------------------------+\n| Sort                 | df %>%                              | df.sort_values('column1')                    |\n|                      |   arrange(column1)                  |                                              |\n+----------------------+-------------------------------------+----------------------------------------------+\n\n",
    "supporting": [
      "tidy_pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}